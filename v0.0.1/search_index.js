var documenterSearchIndex = {"docs":
[{"location":"interfaces/#Interfaces","page":"Interfaces","title":"Interfaces","text":"","category":"section"},{"location":"interfaces/#Base-type","page":"Interfaces","title":"Base type","text":"","category":"section"},{"location":"interfaces/#CAN.Interfaces.AbstractCANInterface","page":"Interfaces","title":"CAN.Interfaces.AbstractCANInterface","text":"Abstract type for Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#CAN.Interfaces.send","page":"Interfaces","title":"CAN.Interfaces.send","text":"send(interface::T<:AbstractCANInterface, frame::CANalyze.CANFrame)\n\nAbstract function for send message.\n\nCommon behavior of concrete implements:\n\nWhen send successed, return nothing.\nWhen send failed, throws error.\n\n\n\n\n\n","category":"function"},{"location":"interfaces/#CAN.Interfaces.recv","page":"Interfaces","title":"CAN.Interfaces.recv","text":"recv(interface::T<:AbstractCANInterface)\n\nAbstract function for receive message.\n\nCommon behavior of concrete implements:\n\nnon-blocking\nWhen receive successed, returns CANalyze.CANFrame.\nWhen receive failed, returns nothing.\n\n\n\n\n\n","category":"function"},{"location":"interfaces/#CAN.Interfaces.shutdown","page":"Interfaces","title":"CAN.Interfaces.shutdown","text":"shutdown(interface::T<:AbstractCANInterface)\n\nAbstract function for shutdown interface.\n\n\n\n\n\n","category":"function"},{"location":"interfaces/#Kvaser","page":"Interfaces","title":"Kvaser","text":"","category":"section"},{"location":"interfaces/#CAN.Interfaces.KvaserInterfaces.KvaserInterface","page":"Interfaces","title":"CAN.Interfaces.KvaserInterfaces.KvaserInterface","text":"KvaserInterface(channel::Int, bitrate::Int)\n\nSetup Kvaser interface with channel number and bitrate(bps).\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#SocketCAN","page":"Interfaces","title":"SocketCAN","text":"","category":"section"},{"location":"interfaces/#CAN.Interfaces.SocketcanInterfaces.SocketcanInterface","page":"Interfaces","title":"CAN.Interfaces.SocketcanInterfaces.SocketcanInterface","text":"SocketcanInterface(channel::String)\n\nSetup SocketCAN interface with channel name.\n\n\n\n\n\n","category":"type"},{"location":"interfaces/#Vector","page":"Interfaces","title":"Vector","text":"","category":"section"},{"location":"interfaces/#CAN.Interfaces.VectorInterfaces.VectorInterface","page":"Interfaces","title":"CAN.Interfaces.VectorInterfaces.VectorInterface","text":"VectorInterface(channel::Int, bitrate::Int, appname::String)\n\nSetup Vector interface with channel number, bitrate(bps), application name.\n\n\n\n\n\n","category":"type"},{"location":"examples/#Example-Usage","page":"Example Usage","title":"Example Usage","text":"","category":"section"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"Let us assume that we have 2-channel Vector interface, the simplest example is below:","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"using CAN\nusing CANalyze\n\nfunction main()\n    vector1 = VectorInterface(0, 500000, \"NewApp\")\n    vector2 = VectorInterface(1, 500000, \"NewApp\")\n\n    frame = CANalyze.CANFrame(15, [1, 1, 2, 2, 3, 3, 4]; is_extended=true)\n\n    send(vector1, frame)\n\n    frame = recv(vector2) # non-blocking receive\n    println(frame)\n\n    frame = recv(vector2) # returns nothing\n    println(frame)\n\n    shutdown(vector1)\n    shutdown(vector2)\nend\n\nmain()","category":"page"},{"location":"examples/","page":"Example Usage","title":"Example Usage","text":"Arguments of interface setup are different depends on kind of interface, see References.","category":"page"},{"location":"hardwares/#Supported-Hardwares","page":"Supported Hardwares","title":"Supported Hardwares","text":"","category":"section"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"This section describes basic usage for each supported hardwares.","category":"page"},{"location":"hardwares/#Kvaser","page":"Supported Hardwares","title":"Kvaser","text":"","category":"section"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"KvaserInterface supports Win64 platform.","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"To setup interface, do something like below,","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"using CAN\n\nkvaser0 = KvaserInterface(0, 500000)  # channel 0, 500kbps","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"send, recv, shutdown functions can be use.","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"Kvaser's api library is redistributed with CAN.jl after its license, users does not need to install them separately.","category":"page"},{"location":"hardwares/#SocketCAN","page":"Supported Hardwares","title":"SocketCAN","text":"","category":"section"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"SocketCANInterface supports Linux platform.","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"To setup interface, ","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"using CAN\n\nsockcan0 = SocketcanInterface(\"can0\")  # channel \"can0\"","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"send, recv, shutdown functions can be use.","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"Bitrate can not be modified from socket api, use ip link command from terminal.","category":"page"},{"location":"hardwares/#Vector","page":"Supported Hardwares","title":"Vector","text":"","category":"section"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"VectorInterface supports Win64 platform. ","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"In this time, author does not get permission to distribute DLLs. So to use this interface,  please install Vector XL-Driver-Library separately. Check vxlapi64.dll is in your path.","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"using CAN\n\nvector1 = VectorInterface(0, 500000, \"NewApp\") # channel 0, 500kbps, application name","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"\"Application name\" means corresponding name in Vector Hardware Manager.","category":"page"},{"location":"hardwares/","page":"Supported Hardwares","title":"Supported Hardwares","text":"send, recv, shutdown functions can be use.","category":"page"},{"location":"#CAN.jl","page":"Home","title":"CAN.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A can-bus communication package for Julia.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CAN.jl is a package for communicating on Control Area Network (CAN, CANbus), supports several hardware interfaces.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Setup device and Transmit/Receive CAN messages in unified easy way.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install from GitHub.","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/ichiro-kazusa/CAN.jl","category":"page"},{"location":"#TODO","page":"Home","title":"TODO","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"supports Filters\nsupports CANFD\nsupports other interfaces\nsupports multi-threading\nsupports async programming","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#Low-level-APIs-for-handle-driver","page":"Internals","title":"Low level APIs for handle driver","text":"","category":"section"},{"location":"internals/#Kvaser","page":"Internals","title":"Kvaser","text":"","category":"section"},{"location":"internals/#CAN.Interfaces.KvaserInterfaces.Canlib","page":"Internals","title":"CAN.Interfaces.KvaserInterfaces.Canlib","text":"Low level API for Kvaser CANlib SDK\n\n\n\n\n\n","category":"module"},{"location":"internals/#SocketCAN","page":"Internals","title":"SocketCAN","text":"","category":"section"},{"location":"internals/#CAN.Interfaces.SocketcanInterfaces.SocketCAN","page":"Internals","title":"CAN.Interfaces.SocketcanInterfaces.SocketCAN","text":"Low level API for SocketCAN\n\n\n\n\n\n","category":"module"},{"location":"internals/#Vector","page":"Internals","title":"Vector","text":"","category":"section"},{"location":"internals/#CAN.Interfaces.VectorInterfaces.Vxlapi","page":"Internals","title":"CAN.Interfaces.VectorInterfaces.Vxlapi","text":"Low level API for Vector XL Driver Library\n\n\n\n\n\n","category":"module"}]
}
